{% extends 'layout/layout-master.twig' %}

{% block jumbotron %}

    <h1>OSCE Data</h1>

    <h2>Explore the data collected from OSCE circuits</h2>

{% endblock %}



{% block content %}

    <div class="col-sm-12" id="builder-d3">

    </div>

    <div class="col-sm-12" id="builder-results">
        <pre id="json-viewer"></pre>
    </div>

{% endblock %}


{% block stylesheets %}
    <link href="/lib/json-viewer/jquery.json-viewer.css" rel="stylesheet">
    <style>

        body {
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        }

        .box {
            font: 10px sans-serif;
        }

        .box line,
        .box rect,
        .box circle {
            fill: steelblue;
            stroke: #000;
            stroke-width: 1px;
        }

        .box .center {
            stroke-dasharray: 3,3;
        }

        .box .outlier {
            fill: none;
            stroke: #000;
        }

        .axis {
            font: 12px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .x.axis path {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

    </style>
{% endblock %}

{% block javascript %}
    <!--  <script type="text/javascript" src="/lib/xapiwrapper/xapiwrapper.min.js"></script>   -->
    <script type="text/javascript" src="/lib/xapiwrapper/cryptojs_v3.1.2.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/verbs.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/xapistatement.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/xapiwrapper.js"></script>

    <script type="text/javascript" src="/lib/xapiwrapper/xapicollection.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/xapidashboard.js"></script>


    <script type="text/javascript" src="/lib/json-viewer/jquery.json-viewer.js"></script>

    <script src="//d3js.org/d3.v3.min.js"></script>
    <script src="//labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>

    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js"></script>

    <script type="text/javascript" src="/js/xapi/config.js"></script>
    <script type="text/javascript" src="/js/d3.box.js"></script>
    <script>

        XAPIWrapper.prototype.getAggregate = function(searchparams, more, callback)
        {
            if (this.testConfig())
            {
                var url = this.lrs.endpoint + "aggregate";
                if (more)
                {
                    url = this.base + more;
                }
                else
                {
                    var urlparams = new Array();

                    for (s in searchparams)
                    {
                        if (s == "until" || s == "since") {
                            var d = new Date(searchparams[s]);
                            urlparams.push(s + "=" + encodeURIComponent(d.toISOString()));
                        } else {
                            urlparams.push(s + "=" + encodeURIComponent(searchparams[s]));
                        }
                    }
                    if (urlparams.length > 0)
                        url = url + "?" + urlparams.join("&");
                }

                var res = ADL.XHR_request(this.lrs,url, "GET", null, this.lrs.auth, callback);
                if(res === undefined || res.status == 404)
                {
                    return null
                }

                try
                {
                    return JSON.parse(res.response);
                }
                catch(e)
                {
                    return res.response;
                }
            }
        };


        $(function() {
            ADL.XAPIWrapper.changeConfig(xAPIConfig);

            //var wrapper = ADL.XAPIWrapper;
            //wrapper.changeConfig({"endpoint" : 'https://lrs.adlnet.gov/xAPI/'});
            var dash = new ADL.XAPIDashboard();

            // get all statements made in the last two weeks
            //var query = {'since': new Date(Date.now() - 1000*60*60*24*30*365*4).toISOString()};
            var query = { 'limit' : 500 };
            dash.fetchAllStatements(query, function(a,b,c){

                console.log(a);

                var t = a
                        .where('object.id = /OSCE\.station/')
                        .groupBy('object.id')
                        //.orderBy('object.id','descending')
                        .max('result.score.raw')
                        .min('result.score.raw')


                t.exec(function(data){
                    console.log(data);

                    var labels = true; // show the text labels beside individual boxplots?

                    var margin = {top: 30, right: 50, bottom: 120, left: 50};
                    var  width = 1000 - margin.left - margin.right;
                    var height = 600 - margin.top - margin.bottom;

                    function draw (data){
                        // using an array of arrays with
                        // data[n][2]
                        // where n = number of columns in the data file
                        // data[i][0] = name of the ith column
                        // data[i][1] = array of values of ith column

                        $.each(data,function(key,item){
                            item.values = [];
                            $.each(item.data,function(key,stmt){

                                item.values.push(stmt.result.score.raw);
                            });
                        });


                        var max = d3.max(data, function (d) {

                            return d.max;//d.frequency
                        })
                        var min = d3.min(data, function (d) {

                            return d.min;//d.frequency
                        })

                        var chart = d3.box()
                                .whiskers(iqr(1.5))
                                .height(height)
                                .domain([min, max])
                                .showLabels(labels);

                        var svg = d3.select("#builder-d3").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .attr("class", "box")
                                .append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                        // the x-axis
                        var x = d3.scale.ordinal()
                                .domain( data.map(function(d) {
                                    console.log(d);
                                    d.letter = d.group;
                                    d.group = d.letter.split("/").pop();
                                    return d.group } ) )
                                .rangeRoundBands([0 , width], 0.7, 0.3);

                        var xAxis = d3.svg.axis()
                                .scale(x)
                                .orient("bottom");

                        // the y-axis
                        var y = d3.scale.linear()
                                .domain([min, max])
                                .range([height + margin.top, 0 + margin.top]);

                        var yAxis = d3.svg.axis()
                                .scale(y)
                                .orient("left");

                        // draw the boxplots
                        svg.selectAll(".box")
                                .data(data)
                                .enter().append("g")
                                .attr("transform", function(d) { return "translate(" +  x(d.group)  + "," + margin.top + ")"; } )
                                .call(chart.width(x.rangeBand()));


                        // add a title
                        svg.append("text")
                                .attr("x", (width / 2))
                                .attr("y", 0 + (margin.top / 2))
                                .attr("text-anchor", "middle")
                                .style("font-size", "18px")
                                //.style("text-decoration", "underline")
                                .text("OSCE 2015");

                        // draw y axis
                        svg.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text") // and text1
                                .attr("transform", "rotate(-90)")
                                .attr("y", 6)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")
                                .style("font-size", "16px")
                                .attr("transform", "rotate(0)")
                                .text("Score");

                        // draw x axis
                        svg.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + (height  + margin.top + 10) + ")")
                                .call(xAxis)

                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 9)
                                .attr("dy", ".35em")
                                .attr("transform", "rotate(90)")
                                .style("text-anchor", "start")




                    }

                    draw (data)

                });





            });

            return;




            var min = Infinity,
                    max = -Infinity;


            // Returns a function to compute the interquartile range.
            function iqr(k) {
                    return function(d, i) {
                        var q1 = d.quartiles[0],
                                q3 = d.quartiles[2],
                                iqr = (q3 - q1) * k,
                                i = -1,
                                j = d.length;
                        while (d[++i] < q1 - iqr);
                        while (d[--j] > q3 + iqr);
                        return [i, j];
                    };
                }


            function getAverage(sss)
            {
                var search = ADL.XAPIWrapper.searchParams();
                //search['verb'] = search['verb'] = ADL.verbs.failed.id;
                //search['actor'] = {"objectType":"Agent","mbox_sha1sum":"51d9c99accc1c535a2c50cf62f4392695521059f"};
                //search['activity'] = "http://local.slim-mypal.org/xapi/activities/OSCE.station/2015.Y3.St17";
                search['activity'] = sss;

                //var ret = ADL.XAPIWrapper.getStatements(search);
                //if (ret)
                //    console.log(ret.statements.length);

                var st_scores = []

                var data = [];

                var letter = sss;
                letter = letter.split("/").pop()

                data[0] = letter;
                data[1] = [];
                data[2] = {
                    min:    Infinity,
                    max:    -Infinity
                };

                ADL.XAPIWrapper.getAggregate(search, null,
                        function getmore(r){
                            var res = JSON.parse(r.response);



                            //console.log(res.statements.length);
                            $.each(res.statements,function(key,item){

                                var v1 = Math.floor(item.result.score.raw);
                                data[1].push(v1);

                                if (v1 > data[2].max) data[2].max = v1;
                                if (v1 < data[2].min) data[2].min = v1;
                            });
                            if (res.more && res.more !== ""){
                                ADL.XAPIWrapper.getStatements(null, res.more, getmore);
                            }
                            else
                            {
                                //update(ret.statements);
                                if (data[2].max > max) max = data[2].max;
                                if (data[2].min < min) min = data[2].min;
                            }
                        });


                return data;

            }

            ADL.XAPIWrapper.changeConfig(xAPIConfig);

            var agent = new ADL.XAPIStatement.Agent(ADL.XAPIWrapper.hash("Nicolas Van Labeke"), "Nicolas");

            {

                var pipeline=[
                    {
                        "$match": {
                            "statement.object.id": {$regex : "OSCE\.station"},
                            "voided": false
                        }
                    }
                ];

                var ret = ADL.XAPIWrapper.getAggregate(search);
                return;

                var search = ADL.XAPIWrapper.searchParams();
                //search['verb'] = search['verb'] = ADL.verbs.failed.id;
                //search['actor'] = {"objectType":"Agent","mbox_sha1sum":"51d9c99accc1c535a2c50cf62f4392695521059f"};
                search['agent'] = JSON.stringify({
                    "objectType":"Agent",
                    "mbox_sha1sum":"801bbb3112222730c9be87f52e49d4e8720ba87c" })
                search['limit'] = 100;
                var ret = ADL.XAPIWrapper.getStatements(search);
                if (ret) {

                    //console.log(ret.statements.length);

                    $("#json-viewer").jsonViewer(ret.statements, {collapsed: true});


                    /*var svg = d3.select("#builder-d3").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    svg.call(tip);*/
                    //draw(ret.statements);
                    data = [];

                    $.each(ret.statements,function(key,item){
                        if (item.object.id.includes("OSCE.station"))
                        {
                            var rrr = getAverage(item.object.id)

                            data.push(rrr);
                        }
                    });

                    console.log(data)
                    draw(data)
                }

            }






        })
    </script>
{% endblock %}