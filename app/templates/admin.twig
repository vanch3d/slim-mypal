{% extends 'layout/layout-master.twig' %}

{% block jumbotron %}

    <h1>myPAL Admin</h1>

    <h2>Load OSCE data</h2>
{% endblock %}


{% block content %}
    <form class="col-sm-6">
        <div class="form-group row">
            <label for="inputYear" class="col-sm-2 form-control-label">OSCE Year</label>
            <div class="col-sm-10">
                <input type="number" class="form-control" id="inputYear" placeholder="OSCE year">
            </div>
        </div>

        <div class="form-group row">
            <label for="inputStationData" class="col-sm-2 form-control-label">Station Blueprints</label>
            <div class="col-sm-10">
                <input type="file"  id="inputStationData" accept="text/csv">
                <small class="text-muted">CSV format, using the station-per-station format</small>
            </div>
        </div>

        <div class="form-group row">
            <label for="inputMarkData" class="col-sm-2 form-control-label" >Mark Sheets</label>
            <div class="col-sm-10">
                <input type="file"  id="inputMarkData" disabled   accept="text/csv">
                <small class="text-muted">CSV format, using the station-per-station report</small>
            </div>
        </div>

        <div class="form-group row">
            <label for="inputSumData" class="col-sm-2 form-control-label">Summative Data</label>
            <div class="col-sm-10">
                <input type="file"  id="inputSumData" accept="text/csv">
                <small class="text-muted">CSV format, using the station-per-station report</small>
            </div>

        </div>






        <div class="form-group row">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="button" class="btn btn-primary" id="submit">Parse</button>
                <div  style="display: inline-block" class="hidden" id="working"><i class="fa fa-refresh fa-spin fa-2x fa-fw" aria-hidden="true"></i>
                    <span class="sr-only">working...</span>
                </div>

            </div>
        </div>
    </form>


    <div class="col-sm-6">



        <div class="row">
        <div id="exTab1" class="containerXXXX">
            <ul  class="nav nav-tabs">
                <li class="active">
                    <a  href="#1a" data-toggle="tab">Output</a>
                </li>
                <li><a href="#2a" data-toggle="tab">Pseudonyms</a>
                </li>

            </ul>

            <div class="tab-content clearfix">
                <div class="tab-pane active" id="1a">
                    <pre id="json-viewer"></pre>
                </div>
                <div class="tab-pane" id="2a">
                    <pre id="user-viewer"></pre>
                </div>

            </div>
        </div></div>

    </div>

    <div class="col-sm-12" id="ouput">
        <div class="col-sm-4"><span>Statements</span> : <span id="count"></span></div>
        <div class="col-sm-4"><span>Statements</span> : <span id="done"></span></div>
    </div>
    <div class="col-sm-12" id="log"></div>
{% endblock %}

{% block stylesheets %}
    <link href="/lib/json-viewer/jquery.json-viewer.css" rel="stylesheet">
{% endblock %}

{% block javascript %}
    <!--  <script type="text/javascript" src="/lib/xapiwrapper/xapiwrapper.min.js"></script>   -->
    <script type="text/javascript" src="/lib/xapiwrapper/cryptojs_v3.1.2.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/verbs.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/xapistatement.js"></script>
    <script type="text/javascript" src="/lib/xapiwrapper/xapiwrapper.js"></script>

    <script type="text/javascript" src="/lib/json-viewer/jquery.json-viewer.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/PapaParse/4.1.2/papaparse.min.js"></script>

    <script type="text/javascript" src="/js/xapi/config.js"></script>
    <script>
        $(function() {

            $.strPad = function(i,l,s) {
                var o = i.toString();
                if (!s) { s = '0'; }
                while (o.length < l) {
                    o = s + o;
                }
                return o;
            };

            function StationClass()
            {
                this.name = "";
                this.type = "";
                this.id = "";
                this.PassScores = -1;
                this.MaxScore = -1;
            }


            ADL.xhrRequestOnError = function(xhr, method, url, callback, callbackargs){
                $("#log").append($("<span/>",{"text":"*","class": "label label-danger"}));

            };


            $("#json-viewer").jsonViewer({ "OSCEActivity": {}}, {collapsed: false});

            var stepped = 0, rowCount = 0, errorCount = 0, firstError;
            var start, end;
            var firstRun = true;
            var config = {
                worker: false,
                skipEmptyLines : false,
                header: false
            };

            ADL.XAPIWrapper.changeConfig(xAPIConfig);

            // Parsing invoked
            $('#submit').click(function()
            {



                var fileSummative = $('#inputSumData')[0].files;
                var fileStation = $('#inputStationData')[0].files;

                if (!fileSummative.length || !fileStation.length)
                {
                    alert("Please choose at least one file to parse.");
                    return enableButton();
                }

                $('#submit').attr("disabled", true);
                $("#working").toggleClass('hidden');

                var stations = {};
                var sumdata = [];

                var vocabulary = {
                    "activity" : {},
                    "verb" : {},
                };

                var maxScore = 0;
                var passTotal = 0;

                // parse station descriptions
                function parseStation(results, parser)
                {
                    if (!results.data.length) return;
                    var dd = results.data[0];
                    console.log("station")

                    maxScore +=Number(dd["Max Score"]);
                    passTotal +=Number(dd["Pass Mark"]);



                    var station = {
                        name: dd.Station,
                        type: dd.Type,
                        id: dd.ID,
                        description: dd.Description,
                        score: {
                            PassMark: Number(dd["Pass Mark"]),
                            MaxScore: Number(dd["Max Score"]),
                        }
                    };

                    stations[dd.Station]=station;
                }

                function parseData(row, parser)
                {
                    if (!row.data.length) return;
                    console.log("parseData");

                    var session = row.data[0]["Session D1"];
                    if (!session) return;

                    var s1= session.split(", ");
                    var s2= s1[1].split("-");
                    var d = new Date(2015, 06, 16, s2[0].substring(0,2), s2[0].substring(2));

                    var userstations = {
                        name: row.data[0]["Candidate Name"],
                        date: d,
                        Score: row.data[0]["Total score"],
                        stations: {}
                    };

                    $.each(row.data[0], function(key, value) {

                        if (/^(Examiner|Station|SP grades)/.test(key) === true) {
                            var k = key.split(" @ ");


                            var station = {
                                station : k[2],
                                date : (k[1]=="Day 1") ? d : new Date(d.getTime() + 24*60*60*1000),
                                score : {
                                    Station : -1,
                                    Examiner : -1,
                                    SimPatient: -1
                                }
                            };

                            if (k[2] in userstations.stations) station = userstations.stations[k[2]];

                            if (/^(Examiner)/.test(key) === true) station.score.Examiner = value;
                            if (/^(Station)/.test(key) === true) station.score.Station = value;
                            if (/^(SP grades)/.test(key) === true) station.score.SimPatient = value;

                            userstations.stations[k[2]] = station;
                        }

                    });

                    sumdata.push(userstations)
                    //var array = $.map(userstations, function(value, index) {
                    //    sumdata.push(value)
                    //});

                }

                $('input[type=file]').parse({
                    config: {
                        header: true,
                        skipEmptyLines: true
                    },
                    before: function(file, inputElem)
                    {
                        console.log(file);
                        // executed before parsing each file begins;
                        // what you return here controls the flow
                        return {
                            action: "continue",
                            reason: "Some reason",
                            config: {
                                step:(fileStation[0].name == file.name) ? parseStation : parseData
                            }
                        }
                    },
                    error: function(err, file, inputElem, reason)
                    {
                        // executed if an error occurs while loading the file,
                        // or if before callback aborted for some reason
                    },
                    complete: function() {
                        //console.log(stations,sumdata)
                        // executed after all files are complete
                        console.log(maxScore,passTotal);

                        var statements = [];
                        var pseudonyms = []

                        $.each(sumdata, function (key, userstation) {
                           // console.log(userstation)

                            // ###################################################
                            var objOSCE = new ADL.XAPIStatement.Activity(
                                    'http://local.slim-mypal.org/xapi/activity/OSCE-circuit/2015.Y3',
                                    'OSCE Circuit Y3 (2015)',
                                    'An OSCE usually comprises a circuit of short stations, in which each candidate is examined on a one-to-one basis with one or two impartial examiner(s) and either real or simulated patients.'
                            );

                            var username = "user" + $.strPad(pseudonyms.length,6);
                            pseudonyms.push(
                                    { "username" : username,
                                      "name" : userstation.name
                                    });

                            var agent = new ADL.XAPIStatement.Agent(ADL.XAPIWrapper.hash(userstation.name), username);

                            // Statement: agent attempted OSCE
                            var stmt1 = new ADL.XAPIStatement(agent, ADL.verbs.attempted, objOSCE);

                            vocabulary.activity[objOSCE.id] = objOSCE;

                            stmt1.generateId();
                            stmt1.generateRegistration();
                            stmt1.timestamp = userstation.date;

                            var res = Number(userstation.Score);
                            var objOSCE2 = new ADL.XAPIStatement.Activity(
                                    'http://local.slim-mypal.org/xapi/activity/OSCE-circuit/2015.Y3',
                                    'OSCE Circuit Y3 (2015)',
                                    'An OSCE usually comprises a circuit of short stations, in which each candidate is examined on a one-to-one basis with one or two impartial examiner(s) and either real or simulated patients.'
                            );
                            var agent2 = new ADL.XAPIStatement.Agent(ADL.XAPIWrapper.hash(userstation.name), username);


                            var stmt2 = new ADL.XAPIStatement(agent2, ADL.verbs.passed, objOSCE2 );


                            stmt2.generateId();
                            stmt2.generateRegistration();
                            stmt2.timestamp = userstation.date;
                            stmt2.result = {
                                score: {
                                    scaled: (1.0 * res) / maxScore,
                                    raw: res,
                                    min: 0,
                                    max: maxScore
                                },
                                success: true,
                                completion: true,
                                duration: "PT10M"


                            };

                            if (res < passTotal)
                            {
                                stmt2.verb = ADL.verbs.failed;
                                stmt2.result.success = false;
                                stmt2.result.response = "The required overall passing score ("+maxScore+") has not been met";
                            }


                            // Add attempting OSCE statement
                            statements.push(stmt1);


                            vocabulary.activity[stmt1.object.id] = stmt1.object;
                            vocabulary.activity[stmt2.object.id] = stmt2.object;
                            vocabulary.verb[stmt1.verb.id] = stmt1.verb;
                            vocabulary.verb[stmt2.verb.id] = stmt2.verb;

                            var passHistory = 0;
                            var passStation = 0;

                            $.each(userstation.stations, function (key, station) {

                                var tt = stations[station.station];

                                var objStation = new ADL.XAPIStatement.Activity(
                                        'http://local.slim-mypal.org/xapi/activities/OSCE.station/' + tt.id,
                                        'OSCE Station ' + tt.id,
                                        tt.description
                                );
                                var stmt3 = new ADL.XAPIStatement(agent, ADL.verbs.passed, objStation);



                                stmt3.generateId();
                                stmt3.generateRegistration();
                                stmt3.timestamp = station.date;

                                var tt = stations[station.station];
                                var type = tt.type;
                                var score = tt.score;


                                var res = Number(station.score.Station);

                                var maxScore = Number(score.MaxScore);
                                var PassMark = Number(score.PassMark);

                                stmt3.result = {
                                    score: {
                                        scaled: (1.0 * res) / maxScore,
                                        raw: res,
                                        min: 0,
                                        max: maxScore
                                    },
                                    success: true,
                                    completion: true,
                                    duration: "PT10M"

                                };
                                if (res<PassMark)
                                {
                                    stmt3.verb = ADL.verbs.failed;
                                    stmt3.result.success =  false;

                                }
                                else
                                {
                                    passStation++;
                                    if (tt.type == "History") passHistory++;

                                }

                                // Add attempting station statement
                                statements.push(stmt3)

                                vocabulary.activity[stmt3.object.id] = stmt3.object;
                                vocabulary.verb[stmt3.verb.id] = stmt3.verb;
                            })


                            if (passHistory<4 || passStation<9)
                            {
                                stmt2.verb = ADL.verbs.failed;
                                stmt2.result.success = false;
                                stmt2.result.response = "The required station rubrics (9 stations passed, including 4 History) have not been met";
                                console.log(JSON.stringify(stmt2));
                            }
                            statements.push(stmt2);

                        })


                        $('#count').html(statements.length)
                        $('#done').html(0)
                        console.log(vocabulary);

                        $("#json-viewer").jsonViewer(vocabulary, {collapsed: true});


                        var csv = Papa.unparse(pseudonyms);
                        $("#user-viewer").html(csv);


                        var count = 0;


                        while(statements.length) {
                            console.log(statements.length);
                            ADL.XAPIWrapper.sendStatements(statements.splice(0,50),
                                    function (resp, obj2) {
                                        var el = $('#done');
                                        var num = parseInt(el.text());
                                        el.text(num+obj2.length);

                                        if (obj2.length < 50)
                                        {
                                            $('#submit').attr("disabled", false);
                                            $("#working").toggleClass('hidden');
                                        }

                                        obj2.forEach(function (item, index) {
                                            //console.log("[" + item + "]: " + resp.status + " - " + resp.statusText);
                                            //$("#log").append($("<div/>",{"text":item}));

                                            $("#log").append($("<span/>", {
                                                "text": "*",
                                                "class": "label label-success"
                                            }));
                                        });
                                    }
                            );
                        }

                    }
                });


            });



        })
    </script>
{% endblock %}





